{"ast":null,"code":"import _classCallCheck from \"/home/pupul/project/dilo-babastudio/frontend/dilo-william/modul1/reactjs-calculator/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/pupul/project/dilo-babastudio/frontend/dilo-william/modul1/reactjs-calculator/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/pupul/project/dilo-babastudio/frontend/dilo-william/modul1/reactjs-calculator/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/pupul/project/dilo-babastudio/frontend/dilo-william/modul1/reactjs-calculator/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/pupul/project/dilo-babastudio/frontend/dilo-william/modul1/reactjs-calculator/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/pupul/project/dilo-babastudio/frontend/dilo-william/modul1/reactjs-calculator/src/App.js\";\nimport React, { Component } from \"react\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.addToInput = function (val) {\n      _this.setState({\n        input: _this.state.input + val\n      });\n    };\n\n    _this.addDecimal = function (val) {\n      // only add decimal if there is no current decimal point present in the input area\n      if (_this.state.input.indexOf(\".\") === -1) {\n        _this.setState({\n          input: _this.state.input + val\n        });\n      }\n    };\n\n    _this.addZeroToInput = function (val) {\n      // if this.state.input is not empty then add zero\n      if (_this.state.input !== \"\") {\n        _this.setState({\n          input: _this.state.input + val\n        });\n      }\n    };\n\n    _this.clearInput = function () {\n      _this.setState({\n        input: \"\"\n      });\n    };\n\n    _this.add = function () {\n      _this.state.previousNumber = _this.state.input;\n\n      _this.setState({\n        input: \"\"\n      });\n\n      _this.state.operator = \"plus\";\n    };\n\n    _this.subtract = function () {\n      _this.state.previousNumber = _this.state.input;\n\n      _this.setState({\n        input: \"\"\n      });\n\n      _this.state.operator = \"subtract\";\n    };\n\n    _this.multiply = function () {\n      _this.state.previousNumber = _this.state.input;\n\n      _this.setState({\n        input: \"\"\n      });\n\n      _this.state.operator = \"multiply\";\n    };\n\n    _this.divide = function () {\n      _this.state.previousNumber = _this.state.input;\n\n      _this.setState({\n        input: \"\"\n      });\n\n      _this.state.operator = \"divide\";\n    };\n\n    _this.evaluate = function () {\n      _this.state.currentNumber = _this.state.input;\n\n      if (_this.state.operator == \"plus\") {\n        _this.setState({\n          input: parseInt(_this.state.previousNumber) + parseInt(_this.state.currentNumber)\n        });\n      } else if (_this.state.operator == \"subtract\") {\n        _this.setState({\n          input: parseInt(_this.state.previousNumber) - parseInt(_this.state.currentNumber)\n        });\n      } else if (_this.state.operator == \"multiply\") {\n        _this.setState({\n          input: parseInt(_this.state.previousNumber) * parseInt(_this.state.currentNumber)\n        });\n      } else if (_this.state.operator == \"divide\") {\n        _this.setState({\n          input: parseInt(_this.state.previousNumber) / parseInt(_this.state.currentNumber)\n        });\n      }\n    };\n\n    _this.state = {\n      input: \"\",\n      previousNumber: \"\",\n      currentNumber: \"\",\n      operator: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, this.state.result), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, this.makeButton(1, 3), this.makeOperator(this.update, \"add\"), this.makeOperator(this.update, \"subtract\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, this.makeButton(4, 6), this.makeOperator(this.update, \"divide\"), this.makeOperator(this.update, \"multiply\")), this.makeButton(7, 9), this.makeButton(0, 0), this.makeOperator(this.update, \"submit\"))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/pupul/project/dilo-babastudio/frontend/dilo-william/modul1/reactjs-calculator/src/App.js"],"names":["React","Component","App","props","addToInput","val","setState","input","state","addDecimal","indexOf","addZeroToInput","clearInput","add","previousNumber","operator","subtract","multiply","divide","evaluate","currentNumber","parseInt","result","makeButton","makeOperator","update"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            input: \"\",\n            previousNumber: \"\",\n            currentNumber: \"\",\n            operator: \"\"\n        };\n    }\n\n    addToInput = val => {\n        this.setState({ input: this.state.input + val });\n    };\n\n    addDecimal = val => {\n        // only add decimal if there is no current decimal point present in the input area\n        if (this.state.input.indexOf(\".\") === -1) {\n            this.setState({ input: this.state.input + val });\n        }\n    };\n\n    addZeroToInput = val => {\n        // if this.state.input is not empty then add zero\n        if (this.state.input !== \"\") {\n            this.setState({ input: this.state.input + val });\n        }\n    };\n\n    clearInput = () => {\n        this.setState({ input: \"\" });\n    };\n\n    add = () => {\n        this.state.previousNumber = this.state.input;\n        this.setState({ input: \"\" });\n        this.state.operator = \"plus\";\n    };\n\n    subtract = () => {\n        this.state.previousNumber = this.state.input;\n        this.setState({ input: \"\" });\n        this.state.operator = \"subtract\";\n    };\n\n    multiply = () => {\n        this.state.previousNumber = this.state.input;\n        this.setState({ input: \"\" });\n        this.state.operator = \"multiply\";\n    };\n\n    divide = () => {\n        this.state.previousNumber = this.state.input;\n        this.setState({ input: \"\" });\n        this.state.operator = \"divide\";\n    };\n\n    evaluate = () => {\n        this.state.currentNumber = this.state.input;\n\n        if (this.state.operator == \"plus\") {\n            this.setState({\n                input:\n                    parseInt(this.state.previousNumber) +\n                    parseInt(this.state.currentNumber)\n            });\n        } else if (this.state.operator == \"subtract\") {\n            this.setState({\n                input:\n                    parseInt(this.state.previousNumber) -\n                    parseInt(this.state.currentNumber)\n            });\n        } else if (this.state.operator == \"multiply\") {\n            this.setState({\n                input:\n                    parseInt(this.state.previousNumber) *\n                    parseInt(this.state.currentNumber)\n            });\n        } else if (this.state.operator == \"divide\") {\n            this.setState({\n                input:\n                    parseInt(this.state.previousNumber) /\n                    parseInt(this.state.currentNumber)\n            });\n        }\n    };\n    \n    render() {\n        return (\n            <div>\n                <center>\n                    <p>{this.state.result}</p>\n                    <div>\n                        {this.makeButton(1, 3)}\n                        {this.makeOperator(this.update, \"add\")}\n                        {this.makeOperator(this.update, \"subtract\")}\n                        <div>\n                            {this.makeButton(4, 6)}\n                            {this.makeOperator(this.update, \"divide\")}\n                            {this.makeOperator(this.update, \"multiply\")}\n                        </div>\n                        {this.makeButton(7, 9)}\n                        {this.makeButton(0, 0)}\n                        {this.makeOperator(this.update, \"submit\")}\n                    </div>\n                </center>\n            </div>\n        );\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}